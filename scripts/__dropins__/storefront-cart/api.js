/*! Copyright 2025 Adobe
All Rights Reserved. */
import{s as p,f as g,h as E}from"./chunks/resetCart.js";import{g as q,r as z,d as V,a as L,b as $,c as j}from"./chunks/resetCart.js";import{t as G,c as I}from"./chunks/refreshCart.js";import{g as J,b as K,d as W,e as X,i as Y,a as Z,r as tt}from"./chunks/refreshCart.js";import{events as C}from"@dropins/tools/event-bus.js";import{g as h}from"./chunks/persisted-data.js";import{A as S}from"./chunks/updateProductsFromCart.js";import{u as rt}from"./chunks/updateProductsFromCart.js";import{b as A,a as _,c as b}from"./chunks/acdl.js";import{g as st,b as ot,a as it}from"./chunks/getEstimateShipping.js";import{g as pt}from"./chunks/getEstimatedTotals.js";import{A as mt,a as ut}from"./chunks/applyCouponsToCart.js";import{a as Ct,r as lt}from"./chunks/removeGiftCardFromCart.js";import{s as gt}from"./chunks/setGiftOptionsOnCart.js";import"@dropins/tools/fetch-graphql.js";import"@dropins/tools/lib.js";import"./fragments.js";const N=async r=>{let e=!1;const c=p.cartId||await U().then(o=>(e=!0,o));return g(S,{variables:{cartId:c,cartItems:r.map(({sku:o,parentSku:a,quantity:m,optionsUIDs:t,enteredOptions:i})=>({sku:o,parent_sku:a,quantity:m,selected_options:t,entered_options:i}))}}).then(({errors:o,data:a})=>{var f;const m=[...((f=a==null?void 0:a.addProductsToCart)==null?void 0:f.user_errors)??[],...o??[]];if(m.length>0)return E(m);const t=G(a.addProductsToCart.cart),i=h(),l=(i==null?void 0:i.items)||[];if(C.emit("cart/updated",t),C.emit("cart/data",t),t){const n=t.items.filter(s=>!l.some(d=>d.sku===s.sku)),u=t.items.filter(s=>{const d=l.find(T=>T.sku===s.sku);return d&&s.quantity!==d.quantity});n.length>0&&C.emit("cart/product/added",n),u.length>0&&C.emit("cart/product/updated",u)}if(t){const n=t.items.filter(u=>r.some(({sku:s})=>s===u.topLevelSku));e?A(t,n,p.locale??"en-US"):_(t,n,p.locale??"en-US")}return t})},y=`
    mutation CREATE_GUEST_CART_MUTATION {
        createGuestCart {
          cart {
            id
          }
        }
    }
`,U=async()=>{const{disableGuestCart:r}=I.getConfig();if(r)throw new Error("Guest cart is disabled");return await g(y).then(({data:e})=>{const c=e.createGuestCart.cart.id;return p.cartId=c,c})},Q=()=>{const r=p.locale??"en-US",e=h();e&&b(e,r)};export{mt as ApplyCouponsStrategy,N as addProductsToCart,ut as applyCouponsToCart,Ct as applyGiftCardToCart,I as config,U as createGuestCart,g as fetchGraphQl,J as getCartData,h as getCartDataFromCache,q as getConfig,st as getCountries,K as getCustomerCartPayload,ot as getEstimateShipping,pt as getEstimatedTotals,W as getGuestCartPayload,it as getRegions,X as getStoreConfig,Y as initialize,Z as initializeCart,Q as publishShoppingCartViewEvent,tt as refreshCart,z as removeFetchGraphQlHeader,lt as removeGiftCardFromCart,V as resetCart,L as setEndpoint,$ as setFetchGraphQlHeader,j as setFetchGraphQlHeaders,gt as setGiftOptionsOnCart,rt as updateProductsFromCart};
